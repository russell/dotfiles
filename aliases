# -*- mode: sh -*-

DARWIN=false
if [[ $(uname) == "Darwin" ]]; then
    DARWIN=true;
fi


alias mkvirtualenv1='mkvirtualenv $(basename $PWD)'

mkvirtualenv () {
    local python=$1
    local name=$2
    local venv=${WORKON_HOME}/${name}

    if [ -d $venv ]; then
        echo "ERROR: Virtual env $venv already exists"
    else
        if ! command -v $python > /dev/null; then
            echo "ERROR: $python not found"
            return 1
        fi

        virtualenv -p $(command -v $python) $venv
    fi

    # Setup .envrc file
    if [ ! -f .envrc ]; then
        touch .envrc
    fi
    grep -q -F "layout virtualenvwrapper $name" .envrc || echo "layout virtualenvwrapper $name" >> .envrc
    grep -q -F "PATH_add bin" .envrc || echo "PATH_add bin" >> .envrc

    if [ ! -f .venv ]; then
        echo "$name" > .venv
    fi
}

mkvirtualenv2 () {
    mkvirtualenv python2 $(basename $PWD)
}

mkvirtualenv3 () {
    mkvirtualenv python3 $(basename $PWD)
}

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

if $DARWIN; then
    alias ls='ls -G'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
else
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'

fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Enable ls colors
if [ "$DISABLE_LS_COLORS" != "true" ]
then
    # Find the option for using colors in ls, depending on the version: Linux or BSD
    ls --color -d . &>/dev/null 2>&1 && alias ls='ls --color=tty' || alias ls='ls -G'
fi

if [ $SSH_TTY ]; then
    export EDITOR="emacs -nw"
    export GIT_EDITOR="emacs -nw"
    export BZR_EDITOR="emacs -nw"
    alias emacs="emacs -nw"
else
    export EDITOR="emacsclient"
    export GIT_EDITOR="emacsclient"
    export BZR_EDITOR="emacsclient"
fi


function ssh-push-key {
  ssh "$@" "echo '`cat ~/.ssh/id_rsa.pub`' >> ~/.ssh/authorized_keys"
}

function rs-in-tmux {
    if { [[ "$TERM" =~ "screen" ]] && [ -n "$TMUX" ]; }; then
        return 0
    else
        return 1
    fi
}

ssh() {
    if rs-in-tmux; then
        command ssh "$@"
        tmux set-window-option automatic-rename "on" 1>/dev/null
        if [ $? -ne 0 ]; then
            printf "\033kssh/*dead\033\\"
        fi
    else
        command ssh "$@"
    fi
}


# EMACS launcher
e () {
    if $DARWIN; then
        EMACS=/Applications/Emacs.app/Contents/MacOS/Emacs
        EMACSCLIENT=/Applications/Emacs.app/Contents/MacOS/bin/emacsclient
    else
        EMACS=emacs
        EMACSCLIENT=emacsclient
    fi

    tempuid=`id -u`
    EMACSSERVER=$TMPDIR/emacs$tempuid/server

    if [ -f $HOME/.emacsconfig ]; then
        source $HOME/.emacsconfig
    fi

    if [ -z "$DISPLAY" ]; then
        $EMACS -n "$@"
    else
        if [ -e "$EMACSSERVER" ]; then
            $EMACSCLIENT -n "$@" &
        else
            $EMACS --eval "(server-start)" "$@" &
        fi
    fi
}

# edit file in console
ec () {
    if $DARWIN; then
        EMACS=/Applications/Emacs.app/Contents/MacOS/Emacs
    else
        EMACS=emacs
    fi
    $EMACS -nw "$@"
}

# edit file with root permissions
E () {
    if $DARWIN; then
        EMACSCLIENT=/Applications/Emacs.app/Contents/MacOS/bin/emacsclient
    else
        EMACSCLIENT=emacsclient
    fi
    $EMACSCLIENT-n -a emacs "/sudo:root@localhost:$PWD/$1"
}

# edit file in console with a root permissions.
EC () {
    if $DARWIN; then
        EMACS=/Applications/Emacs.app/Contents/MacOS/Emacs
    else
        EMACS=emacs
    fi
    $EMACS -nw "/sudo:root@localhost:$PWD/$1"
}

function ssh-push-key {
  ssh "$@" "echo '`cat ~/.ssh/id_rsa.pub`' >> ~/.ssh/authorized_keys"
}

function ansible-vault-diff {
    diff -u \
         <(ansible-vault view <(git show HEAD^:./${1})) \
         <(ansible-vault view <(git show HEAD:./${1}))
}
