(setq auto-mode-alist (cons '("\\.log$" . syslog-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("syslog$" . syslog-mode) auto-mode-alist))


(defun syslog-python-stacktrace ()
  (interactive)
  (let* ((start-point (point-at-bol))
         (end-point (point-at-eol))
         (log-line (buffer-substring-no-properties start-point end-point))
         (buffer (get-buffer-create "*python: stacktrace*")))
    (with-current-buffer buffer
      (let ((buffer-read-only nil))
        (erase-buffer)
        (insert log-line)
        (goto-char (point-min))
        (re-search-forward "\\[.*\\]+ " nil t)
        (goto-char (match-end 0))
        (insert "\n\n")
        (point-at-eol)
        (insert "\n")
        (goto-char (point-min))
        (while (re-search-forward "#[0-9]+-[0-9]+-[0-9]+ [0-9]+:[0-9]+:[0-9]+.[0-9]+ [0-9]+ TRACE [^\s]+ " nil t)
          (goto-char (match-beginning 0))
          (replace-match "\n")
          (goto-char (match-end 0)))
        (goto-char (point-min)))
      (compilation-mode))
    (let ((split-height-threshold 0)
          (split-width-threshold nil))
      (switch-to-buffer-other-window buffer))))

(require 'syslog-mode)
(define-key syslog-mode-map "P" 'syslog-python-stacktrace)
