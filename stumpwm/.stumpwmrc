;; Hey, Emacs! This is a -*- lisp -*- file!
;debian=sbcl

(in-package :stumpwm)

(quicklisp:quickload 'swank)

;; load Swank so we can connect with SLIME
(swank-loader:init)
(defvar *swank-p* nil)

;; define swank command to start swank server on port 4005
(defcommand swank () ()
  "Starts a swank server on port 4000 and notifies the user."
  (setf stumpwm:*top-level-error-action* :break)
  (if *swank-p*
      (message "Swank server already running.")
    (progn
      (swank:create-server :port 4000
                           :style swank:*communication-style*
                           :dont-close t)
      (setf *swank-p* t)
      (message "Starting swank on port 4000."))))

(setf stumpwm::*debug-level* 1)
(setf *debug-stream* (open "~/.stumpwm.log"
                           :direction :output
                           :if-exists :supersede))
;; from http://en.wikipedia.org/wiki/User:Gwern/.stumpwmrc
(defun cat (&rest strings) "A shortcut for (concatenate 'string foo bar)."
  (apply 'concatenate 'string strings))


;; Set sloppy focus
(setf *mouse-focus-policy* :sloppy)
(add-to-load-path "/home/russell/projects/lisp/stumpwm-contrib/")
(add-to-load-path "/home/russell/projects/lisp/stumpwm-contrib/modeline/battery-portable")

; (asdf:initialize-source-registry)
;;(quicklisp:quickload :stumpwm.contrib.kbd-brightness)
;;(quicklisp:quickload :stumpwm.contrib.wifi)
;; (quicklisp:quickload :battery-portable)

;;
;; Mode line
;;
(quicklisp:quickload 'battery-portable)

(setf *mode-line-foreground-color* "Gray40")
(setf *mode-line-background-color* "Gray20")
(set-focus-color "Gray40")

(defparameter *vol-status-command*
  "amixer get Master | egrep '[[:digit:]]+%' -o | head -1 | tr -d '\\n'")

(defparameter *screen-mode-line-format-last*
  (concatenate 'list
               (list "[^B%n^b] %W^>")
               (when (not (null (battery-portable::all-batteries
                                 (battery-portable::preferred-battery-method))))
                 (list "| %B "))
               (list "| Vol. "
                     '(:eval (run-shell-command *vol-status-command* t)))
               (list "| %i | [%d]")))

(setf *time-modeline-string* "%Y-%m-%d %a ^B%l:%M^b")
(setf *screen-mode-line-format* "[^B%n^b]%W")

;; Turn on the modeline for each head with different mode lines
(let ((heads (reverse (screen-heads (current-screen)))))
  (loop :for head :in (cdr heads)
        :do (enable-mode-line (current-screen) head t *screen-mode-line-format*))
  (enable-mode-line (current-screen) (car heads) t *screen-mode-line-format-last*))

(setf *mode-line-timeout* 10) ; Update every 10 seconds if nothing else has triggered it already.
(turn-on-mode-line-timer)

(setf *window-format* "%m%n%s%c")

;;
;; message windows
;;

(setf *message-window-gravity* :center)

(setf *message-window-padding* 20)
(set-msg-border-width 2)

(setf *input-window-gravity* :bottom-left)

;;
;; Mixer keys
;;

(define-key *top-map* (kbd "XF86AudioLowerVolume") "exec amixer set Master 5%-")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "exec amixer set Master 5%+")
(define-key *top-map* (kbd "XF86AudioMute") "exec amixer set Master toggle")


;;
;; Brightness
;;

;;(load-module "kbd-brightness")
;;(setf stumpwm.contrib.kbd-brightness:*keyboard-brightness-display* t)
;;(define-key *top-map* (kbd "XF86KbdBrightnessUp") "kbd-brightness 25")
;;(define-key *top-map* (kbd "XF86KbdBrightnessDown") "kbd-brightness -25")


;;
;; Brightness Control
;;

(defun parse-string-to-float (line)
  (car
   (with-input-from-string (s line)
     (loop
       :for num := (read s nil nil)
       :while num
       :collect num))))

;; (defcommand brightness (value) ((:number "Adjust brightness: "))
;;   "Increment brightness."
;;   (let ((arg (if (plusp value) "-inc" "-dec")))
;;     (run-shell-command (format nil "xbacklight ~a ~a" arg (abs value))))
;;   (format nil "Brightness: ~,2f"
;;           (parse-string-to-float
;;            (run-shell-command "xbacklight" t))))

;; (define-key *top-map* (kbd "XF86MonBrightnessUp") "brightness 10")
;; (define-key *top-map* (kbd "XF86MonBrightnessDown") "brightness -10")

;;** 2 (info "(stumpwm)Key Bindings")

;; `*top-map*' is the top level key map. This is where you'll find the
;; binding for the prefix map.
;;
;; `*root-map*' is the keymap by default bound to `C-t'. It is known as the
;; prefix map.

;; new root map bindings
(define-key *top-map* (kbd "s-t") '*root-map*)
(undefine-key *top-map* (kbd "C-t"))

(define-key *top-map* (kbd "s-o") "fnext")

(set-prefix-key (kbd "s-t"))

(define-key *root-map* (kbd "I") "show-window-properties")
(define-key *top-map* (kbd "s-k") "delete")

(define-key *top-map* (kbd "s-0") "select-window-by-number 0")
(define-key *top-map* (kbd "s-1") "select-window-by-number 1")
(define-key *top-map* (kbd "s-2") "select-window-by-number 2")
(define-key *top-map* (kbd "s-3") "select-window-by-number 3")
(define-key *top-map* (kbd "s-4") "select-window-by-number 4")
(define-key *top-map* (kbd "s-5") "select-window-by-number 5")
(define-key *top-map* (kbd "s-6") "select-window-by-number 6")
(define-key *top-map* (kbd "s-7") "select-window-by-number 7")
(define-key *top-map* (kbd "s-8") "select-window-by-number 8")
(define-key *top-map* (kbd "s-9") "select-window-by-number 9")


(define-key *top-map* (kbd "M-Up")    "move-window up")
(define-key *top-map* (kbd "M-Down")  "move-window down")
(define-key *top-map* (kbd "M-Left")  "move-window left")
(define-key *top-map* (kbd "M-Right") "move-window right")

;; Alternative layout for the ergodox
(define-key *top-map* (kbd "s-p") "move-window up")
(define-key *top-map* (kbd "s-n") "move-window down")
(define-key *top-map* (kbd "s-b") "move-window left")
(define-key *top-map* (kbd "s-f") "move-window right")

;; Launch Web Browser
(defcommand chrome () ()
  "Start Google Chrome or switch to it, if it is already running."
  (run-or-raise "google-chrome" '(:class "google-chrome")))
(define-key *root-map* (kbd "u") "chrome")
(define-key *top-map* (kbd "s-u") "chrome")

(defcommand firefox () ()
  "Start Firefox or switch to it, if it is already running."
  (run-or-raise "firefox" '(:class "Firefox")))
(define-key *top-map* (kbd "s-f") "firefox")

;; Launch Terminal
(defcommand terminal () ()
  "Start Terminator or switch to it, if it's already running."
  (run-or-raise "gnome-terminal" '(:class "Gnome-terminal")))
(define-key *top-map* (kbd "s-i") "terminal")

;; log out
(define-key *root-map* (kbd "^") "quit")

(defcommand reinit () ()
  "reload the stumpwm config file"
  (run-commands "reload" "loadrc"))

(defcommand emacs () ()
  "Start emacs unless it is already running, in which case focus it."
  (run-or-raise "exec /usr/bin/emacs --name emacs-primary-server --eval '(server-start)'"
                '(:class "Emacs" :instance "emacs-primary-server")))
(define-key *top-map* (kbd "s-e") "emacs")

(defcommand toggle-keyboard-map () ()
  "Toggle XKeyboard map"
  (run-shell-command "/home/russell/bin/togglexkbmap")
  (run-shell-command "/usr/bin/xmodmap ~/.xmodmaprc"))

(defcommand rofi-drun () ()
  "Rofi DRun"
  (run-shell-command "rofi -show drun -fg '#f1f1f1' -bg `#333333' -hlfg `#ffffff' -hlbg `#336699' -o 85"))
(define-key *top-map* (kbd "s-l") "rofi-drun")

(defcommand rofi-run () ()
  "Rofi Run"
  (run-shell-command "rofi -show run -fg '#f1f1f1' -bg `#333333' -hlfg `#ffffff' -hlbg `#336699' -o 85"))

(defcommand rofi-window () ()
  "Rofi window"
  (run-shell-command "rofi -show window -fg '#f1f1f1' -bg `#333333' -hlfg `#ffffff' -hlbg `#336699' -o 85"))

;;
;; MPD
;;

;; (load-module "mpd")
;; (define-key *top-map* (kbd "s-p") '*mpd-map*)
;; (define-key *top-map* (kbd "XF86Forward") "mpd-next")
;; (define-key *top-map* (kbd "XF86Back") "mpd-prev")
;; (define-key *top-map* (kbd "XF86AudioNext") "mpd-next")
;; (define-key *top-map* (kbd "XF86AudioPrev") "mpd-prev")
;; (define-key *top-map* (kbd "XF86AudioPlay") "mpd-toggle-pause")


;;;;
;;;; Menu
;;;;

(defparameter *start-menu*
  '(("Graphics"
     ("GIMP" "gimp")
     ("Inkscape" "inkscape")
     ("Rawstudio" "rawstudio")
     ("Darktable" "darktable")
     ("Screenshot" "gnome-screenshot -a"))

    ("Internet"
     ("Iceweasel" "iceweasel")
     ("Firefox" "firefox")
     ("Conkeror" "conkeror")
     ("Chrome" "google-chrome"))

    ("Office"
     ("LibreOffice" "libreoffice"))

    ("Sound and Video"
     ("Rhythmbox" "rhythmbox")
     ("Pithos" "pithos")
     ("Sound Juicer" "sound-juicer")
     ("Totem" "totem"))

    ("System Tools"
     ("Disk space" "baobab")
     ("File Manager" "nautilus --no-desktop")
     ("Printers" "system-config-printer")
     ("Remote Desktop" "vinagre"))

    ("X Windows Tools"
     ("Events" "xev"))))

(defcommand menu () ()
  "docstring"
  (labels ((pick (options)
                 (let ((selection (stumpwm::select-from-menu
                                   (current-screen) options "")))
                   (cond
                    ((null selection)
                     (throw 'stumpwm::error "Abort."))
                    ((stringp (second selection))
                     (second selection))
                    (t
                     (pick (cdr selection)))))))
    (let ((choice (pick *start-menu*)))
      (run-shell-command choice))))

(define-key *root-map* (kbd ".") "menu")


;;;
;;; Applications startup
;;;

;; Enable scrolling in GTK3 applications
(sb-posix:setenv "GDK_CORE_DEVICE_EVENTS" "1" 1)

;; GNOME Keyring
(let* ((output (run-shell-command "/usr/bin/gnome-keyring-daemon --start" t))
       (lines (loop :for i = 0 :then (1+ j)
                    :as j = (position #\linefeed output :start i)
                    :collect (subseq output i j)
                    :while j)))
  (dolist (line lines)
    (when (> (length line) 0)
      (let ((env-var (loop :for i = 0 :then (1+ j)
                           :as j = (position #\= line :start i)
                           :collect (subseq line i j)
                           :while j)))

        (sb-posix:setenv (car env-var) (cadr env-var) 1)))))

;; dunst
(run-shell-command "/usr/bin/dunst -conf ~/.dunstrc")

;; xmodmap
(run-shell-command "/usr/bin/xmodmap ~/.xmodmaprc")

;; redshift
(run-shell-command "/usr/bin/redshift -l 38:144")

;; xbindkeys
(run-shell-command "/usr/bin/xbindkeys")

;; xbindkeys
(run-shell-command "/usr/bin/compton")


;; taken from https://gist.github.com/vlnx/5651256
(defvar *useless-gaps-size* 8)
(defvar *useless-gaps-on* nil)

;; Redefined - with `if`s for *useless-gaps-on*
(defun maximize-window (win)
  "Maximize the window."
  (multiple-value-bind (x y wx wy width height border stick)
      (geometry-hints win)

    (if *useless-gaps-on*
        (setf width (- width (* 2 *useless-gaps-size*))
              height (- height (* 2 *useless-gaps-size*))
              x (+ x *useless-gaps-size*)
              y (+ y *useless-gaps-size*)))

    (dformat 4 "maximize window ~a x: ~d y: ~d width: ~d height: ~d border: ~d stick: ~s~%" win x y width height border stick)
    ;; This is the only place a window's geometry should change
    (set-window-geometry win :x wx :y wy :width width :height height :border-width 0)
    (xlib:with-state ((window-parent win))
      ;; FIXME: updating the border doesn't need to be run everytime
      ;; the window is maximized, but only when the border style or
      ;; window type changes. The overhead is probably minimal,
      ;; though.
      (setf (xlib:drawable-x (window-parent win)) x
            (xlib:drawable-y (window-parent win)) y
            (xlib:drawable-border-width (window-parent win)) border)
      ;; the parent window should stick to the size of the window
      ;; unless it isn't being maximized to fill the frame.
      (if (or stick
              (find *window-border-style* '(:tight :none)))
          (setf (xlib:drawable-width (window-parent win)) (window-width win)
                (xlib:drawable-height (window-parent win)) (window-height win))
          (let ((frame (window-frame win)))
            (setf (xlib:drawable-width (window-parent win)) (- (frame-width frame)
                                                               (* 2 (xlib:drawable-border-width (window-parent win)))
                                                               (if *useless-gaps-on* (* 2 *useless-gaps-size*) 0))
                  (xlib:drawable-height (window-parent win)) (- (frame-display-height (window-group win) frame)
                                                                (* 2 (xlib:drawable-border-width (window-parent win)))
                                                                (if *useless-gaps-on* (* 2 *useless-gaps-size*) 0)))))
      ;; update the "extents"
      (xlib:change-property (window-xwin win) :_NET_FRAME_EXTENTS
                            (list wx wy
                                  (- (xlib:drawable-width (window-parent win)) width wx)
                                  (- (xlib:drawable-height (window-parent win)) height wy))
                            :cardinal 32))))

(defun reset-all-windows ()
  "Reset the size for all tiled windows"
  (let ((windows (mapcan (lambda (g)
                           (mapcar (lambda (w) w) (sort-windows g)))
                         (sort-groups (current-screen)))))
    (mapcar (lambda (w)
              (if (string= (class-name (class-of w)) "TILE-WINDOW")
                  (maximize-window w))) windows)))

(defcommand gaps () ()
            "Toggle the padding of tiled windows"
            (setf *useless-gaps-on* (null *useless-gaps-on*))

            ;; Following is pseudo code to use hooks
            ;; to do something like change border colors or size
            ;; (if *useless-gaps-on*
            ;;     (run-hook 'frame-gap-on)
            ;;     (run-hook 'frame-gap-off))
            (reset-all-windows))
